Q: What happens when you initialize a repository? Why do you need to do it?

A: Initializing a repository creates a hidden .git directory that stores the history of my changes. It is needed to convert a normal directory into a git repository and to be able to use git commands inside the directory.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: Staging area is a temporary place where you add the changes that you want to include into the next commit. This is different from working directory because working directory contains all the files in the most recent state while staging area could only contain a subset of these files. It is also different from repository as repository contains all the previous commits. It doesn't keep record of uncommitted changes.
This helps with splitting multiple changes into different logical commits instead of forcing all of them into a single commit.

Q: How can you use the staging area to make sure you have one commit per logical change?

A: This can be done by adding files to the staging area one at a time using "git add <filename>". This ensures that I only add the files related to my logical change to one commit. After committing these files, I can go ahead and add more unstaged files to create a different commit.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: They are helpful in the following situations:
    1- When making changes just for a demo
    2- When making experimental changes that might work and might fail
    3- When working on a big feature and I don't want to mess with the master branch until the feature is fully working.
    4- Whenever I introduce changes that are not yet tested and I don't want to break the master branch.
    5- It helps working on multiple tasks in parallel by just switching between branches.

Q: How do the diagrams help you visualize the branch structure?

A: It helps visualizing how branches are connected. Where did feature branches got forked from the master branch. How the branches advanced after the fork and what features are included in each branch. It also helps solving the ambiguity of having different log history for each branch.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: The result is all the changes that happened in both branches merged in a single branch. The diagram clarifies the sequence of changes in each branch before the merge. This way it is easier to see the parent of each commit in either branch, otherwise if both commits are visually mixed together, we won't be able to figure out the changes introduced by a certain commit only.

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: Pros:
    1- Fast merging process
    2- Lower chance of human error (forgetting some changes or causing build breaks)
    3- Adding history of previous commits from both branches properly, so reverting to any previous change remains possible.

    Cons:
    1- you might include changes that you don't want to add from the other branch. Merging is not selective at this point. It adds all the other branch commits to your branch.